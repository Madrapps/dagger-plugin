plugins {
    id 'java'
    id 'jacoco'
    id 'org.jetbrains.intellij' version '1.6.0'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'org.jetbrains.kotlin.kapt' version '1.6.21'
}

group 'com.madrapps'
version '0.3.2022.2.0'


jacoco {
    toolVersion '0.8.6'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

repositories {
    mavenCentral()
    maven { url "https://maven.google.com/" }
}

intellij {
    version = '2022.2'
    plugins = ['Kotlin', 'java', 'android']
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation 'com.google.dagger:dagger:2.31.2'
    implementation 'com.google.dagger:dagger-compiler:2.31.2'
    implementation 'com.google.dagger:dagger-android-processor:2.31.2'
    implementation group: 'com.google.dagger', name: 'dagger-spi', version: '2.31.2'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation fileTree(include: ['*.jar'], dir: 'libs')
    kaptTest fileTree(include: ['*.jar'], dir: 'libs')
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

test {
    systemProperty "idea.home.path", "${System.env.IDE_SOURCES}"
}

tasks.create(name: "testCoverage", type: JacocoReport, dependsOn: "test") {

    group = "Reporting"
    description = "Generate Jacoco coverage reports for the test build."

    reports {
        html.enabled = true
        xml.enabled = true
    }

    def excludes = [
            '**/*Test*.*',
            '**/actions/*.*',
            '**/core/*.*',
            '**/markers/*.*',
            '**/services/**/*.*',
            '**/toolwindow/*.*',
            '**/utils/*.*'
    ]

    def javaClasses = fileTree(dir: "${buildDir}/classes/java/main-instrumented", excludes: excludes)
    def kotlinClasses = fileTree(dir: "${buildDir}/classes/kotlin/main", excludes: excludes)
    classDirectories.from = files([javaClasses, kotlinClasses])

    sourceDirectories.from = files([
            "$project.projectDir/src/main/java",
            "$project.projectDir/src/main/kotlin",
            "$buildDir/generated/source/kapt/test"
    ])

    executionData.from = files("${project.buildDir}/jacoco/test.exec")
}
